<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | PavingWays Limited]]></title>
  <link href="http://pavingways.github.io/categories/javascript/atom.xml" rel="self"/>
  <link href="http://pavingways.github.io/"/>
  <updated>2014-01-04T00:56:46+01:00</updated>
  <id>http://pavingways.github.io/</id>
  <author>
    <name><![CDATA[PavingWays Limited]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhoneGap Meetup #2 Retrospektive]]></title>
    <link href="http://pavingways.github.io/phonegap-meetup-2-retrospektive_2431.html"/>
    <updated>2011-08-12T22:42:28+02:00</updated>
    <id>http://pavingways.github.io/phonegap-meetup-2-retrospektive_2431</id>
    <content type="html"><![CDATA[<p>Vergangenen Mittwoch hatten wir nun unser zweites <a href="http://www.phonegap.com/" title="PhoneGap">PhoneGap</a> und HTML5 Meetup. Auf der Agenda standen zwei Präsentationen: <a href="http://www.meetup.com/PhoneGap-HTML5-Meetup-Rhein-Main/"></a>PhoneGap 1.0 und Remote Debugging, außerdem hat sich <a href="https://twitter.com/#!/wpbasti" title="@wpbasti">@wpbasti</a> spontan zu einem Intro zu <a href="http://en.wikipedia.org/wiki/Programming_tool" title="Tooling">Tooling</a> im allgemeinen und <a href="https://github.com/wpbasti/jasy" title="Jasy">Jasy</a> im speziellen entschlossen.</p>

<p>Nachdem ich mein Intro zu PhoneGap 1.0 mit Ausblick auf 2.0 und eine kurze XCode Demo mit dem <a href="http://joapp.com/" title="Jo App-Framework">Jo App-Framework</a> beendet hatte, hat uns Martin <a href="http://phonegap.github.com/weinre/">Weinre</a> und Remote Debugging gezeigt. Er hat uns außerdem die Idee zu seiner anstehenden Bachelor-Arbeit präsentiert. Dabei geht es um die Entwicklung eines PhoneGap-Polyfills um die Entwicklung von Apps im Browser zu erleichtern. Die Idee kam gut an und mögliche Parallelen zum <a href="http://ripple.tinyhippos.com/">Ripple Emulator</a> wurden kurz besprochen. Martin hat außerdem vor, ein Meetup für Mobile-Entwickler in Mannheim zu starten.</p>

<p>Unser kleiner Bereich im <a href="http://www.sternstunde-ffm.de/">Sternstunde</a> war mit den 9 Teilnehmern, davon einige neue, ganz gut ausgelastet und es gab leckere arabische Tapas. Leider war es etwas lauter als erhofft, da parallel das Spiel Deutschland : Brasilien lief. Wir haben uns dennoch gut unterhalten und ich denke, es war für jeden etwas interessantes dabei.</p>

<p>Unser Teilnehmer <a href="https://twitter.com/#!/wltrd">Walter</a> hat uns noch darauf hingewiesen, dass er mit <a href="https://twitter.com/#!/ppk">@ppk</a> im September einen Mobilism-Workshop in Frankfurt organisiert. Der geplante Termin ist der 28. und 29. September 2011. Mehr Infos dazu gibt&rsquo;s auf der <a href="http://mobilism.nl/workshops/frankfurt-sept-2011">Mobilism Website</a>.</p>

<p>Das nächste Meetup folgt in ein paar Wochen und wird natürlich auch auf <a href="http://www.meetup.com/PhoneGap-HTML5-Meetup-Rhein-Main/">unserer Meetup.com Seite</a> bekannt gegeben &ndash; ich freue mich schon drauf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhoneGap/HTML5 Meetup #2]]></title>
    <link href="http://pavingways.github.io/phonegaphtml5-meetup-2_2418.html"/>
    <updated>2011-08-04T14:49:22+02:00</updated>
    <id>http://pavingways.github.io/phonegaphtml5-meetup-2_2418</id>
    <content type="html"><![CDATA[<p>Unser <strong>2. Phonegap/HTML5 Meetup</strong> findet am 10. August im <a href="http://www.sternstunde-ffm.de/">Café Sternstunde</a>, Färberstraße 65 in Frankfurt/Main statt. Themen: PhoneGap 1.0 und Remote Debugging. Wir haben ein Séparée mit genug Platz und großem Fernseher für die Präsentationen. WLAN sollte es auch geben. Außerdem kann man auch was trinken und essen (Arabische Tapas z.B.) &ndash; gute Mischung aus Präsentationen und dem Casual-Teil ist also möglich! Anmeldung bitte über <a href="http://www.meetup.com/PhoneGap-HTML5-Meetup-Rhein-Main/events/27928361/" target="_blank">Meetup</a> oder <a href="https://www.xing.com/events/phonegap-html5-meetup-2-797984" target="_blank">Xing</a> oder <a href="http://www.facebook.com/event.php?eid=257455647599484" target="_blank">Facebook</a>! Bis nächste Woche!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5/CSS3 Meetup April Recap (updated)]]></title>
    <link href="http://pavingways.github.io/html5css3-meetup-april-recap_1647.html"/>
    <updated>2010-04-26T01:52:07+02:00</updated>
    <id>http://pavingways.github.io/html5css3-meetup-april-recap_1647</id>
    <content type="html"><![CDATA[<p>It has been a few days ago, but I still wanted to provide a little recap of our last HTML5/CSS3 meetup. We were set up for eight people this time but only had a turnout of five. It was still a nice evening at
<a href="http://www.frollein-restaurant.de">Frollein in Sachsenhausen</a>. Additional to great food there was some HTML5 with <a href="http://www.modernizr.com">Modernizr</a> presented by <a href="http://twitter.com/jesseberlin">Jesse</a> and a lot of <a href="http://nodejs.org">Node.js</a>.</p>

<p><a href="http://www.modernizr.com">Modernizr</a> is a tool you can use as a fallback mechanism for new HTML5 pages. You include the JavaScript file in your HTML5 page and it detects the browser&rsquo;s compatibility for all sorts of new features. The tool adds classes for each supported HTML5 attribute to the document&rsquo;s body so you can take care of these document parts with special CSS classes. Modernizr also creates a special JavaScript object to do things like:</p>

<pre><code>if (Modernizr.geolocation){ ...do geolocation stuff ... }
</code></pre>

<p>&hellip; kinda neat. It would be great to have this as a jQuery plugin or even better within the <a href="http://api.jquery.com/jQuery.support">jQuery.support</a> feature. Both <a href="http://twitter.com/kompozer">Andreas</a> and myself had prepared a WebSocket demo. My demo did not work, Andreas' did, at least halfway&hellip;
There was incoming data from <a href="http://apiwiki.twitter.com/Streaming-API-Documentation">Twitter&rsquo;s brand new streaming API</a> to Node.js. The WebSocket connection to Chrome did not really want to work completely that evening, but we could see #fail-tagged tweets streaming in on the console :) I can not really recall the context, but there were also talking about <a href="http://code.stanziq.com/strophe/">Strophe</a>, a JavaScript XMPP library framework well worth looking into.
<strike>I don&rsquo;t have access to Andreas' presentation</strike> (see below), but I also created one, so here&rsquo;s another introduction to Node.js:</p>

<p>We were thinking of getting a small HTML5/CSS3 project going within the meetup group, so everybody has something to work on until the next meetup &ndash; I still think this is a good idea, now if I could just come up with something useful&hellip;</p>

<p>The next meetup will be around the end of May, stay tuned!</p>

<p>UPDATE: Andreas provided Links to his slides and the project itself, it&rsquo;s called <a href="http://github.com/kompozer/tweamer"><strong>tweamer</strong> and it is available on GitHub</a>. Here are the slides:</p>

<p>If you want to attend the HTML5/CSS3 Meetup in Frankfurt in May, please sign up here: <a href="http://bit.ly/aVEmCm"><a href="http://bit.ly/aVEmCm">http://bit.ly/aVEmCm</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js is Important. An Introduction]]></title>
    <link href="http://pavingways.github.io/nodejs-node-is-important-introduction_1618.html"/>
    <updated>2010-03-20T00:46:20+01:00</updated>
    <id>http://pavingways.github.io/nodejs-node-is-important-introduction_1618</id>
    <content type="html"><![CDATA[<p>Once in a while you come across a new technology and are just blown away by it. You feel that something like this should have been around much earlier and that it is (gonna be) a significant milestone, not just in your own live as a developer but in general. The last time this happened to me was when I dug a bit deeper into a project called <a href="http://nodejs.org/">node.js</a> or just &ldquo;node&rdquo; as the binary is called. In case you have not heard about this don&rsquo;t worry. However, if you are a developer, especially if you are working with JavaScript, then you should be concerned and maybe check your news sources, because it is a couple of months old already and it is drawing a lot of attention lately! If you&rsquo;re not a developer this might get a bit techy from here, but maybe you get something out of it after all&hellip;</p>

<h3>What is node.js?</h3>

<p> It&rsquo;s actually not too easy to explain, but basically node.js is an:</p>

<ul>
<li><p>open-source</p></li>
<li><p>low-level</p></li>
<li><p>evented</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Asynchronous_I/O">non-blocking</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Event_loop">event loop</a> based</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Server-side_JavaScript">SSJS</a> runtime environment</p></li>
</ul>


<p> It is written in C and JavaScript, it contains the</p>

<p><a href="http://en.wikipedia.org/wiki/V8_(JavaScript_engine)">V8 JavaScript engine</a>, a <a href="http://commonjs.org/">CommonJS</a> module system and it helps you to implement highly <a href="http://en.wikipedia.org/wiki/Concurrency_(computer_science)">concurrent web servers</a> by handling I/O very efficiently, namely in a <a href="http://www.kegel.com/dkftpbench/nonblocking.html">non-blocking</a> way. Support for TCP, DNS and HTTP is included and many HTTP features are supported that are important for <a href="http://en.wikipedia.org/wiki/Comet_(programming)">Comet</a>-style web applications &ndash; things like hanging requests. Node.js itself is a program that will have to be compiled and installed on your machine. Then you can use JavaScript to write programs that use the API of node.js and that are executed through the node binary as simple as this: &ldquo;node yourprogram.js&rdquo;. Due to the included V8 you have the complete JavaScript API available, it&rsquo;s just that you are not running your JavaScript program inside of a browser context, but as a program within the node.js environment. Node extends the JS API by several things like access to the file system and such. All of this is what <a href="http://en.wikipedia.org/wiki/Server-side_JavaScript">server-side JavaScript</a> is all about.</p>

<h3>What is Special about node.js?</h3>

<p> There are other implementations for this kind of stuff, but what <a href="http://tinyclouds.org/">Ryan Dahl</a> <a href="http://github.com/ry/node">et al</a> do differently with node.js is to use <strong>JavaScript</strong> as the main programming language and the strict paradigm of exclusively working with callbacks and<strong> non-blocking I/O</strong>. This means that basically any function you are executing in a node.js program does work in the background after calling, executing a <strong>callback function</strong> once it is done. This enables the program itself to continue and not to block any resources while it is waiting for the function to finish whatever it does.</p>

<h3>A Practical Example: The Web Server</h3>

<p> Ok, this is a bit dry and mind-bending maybe, but it all makes a lot of sense: Think about <a href="http://www.kegel.com/c10k.html">thousands of internet users entering the URL of your website</a> causing their web browsers to hit your web server at the same time (maybe they fire Ajax requests too). Each of these requests would cause a <strong>thread</strong> in your regular web server (= Apache) to spawn that executes a script (PHP maybe) which does DB queries and such before finally returning the response to the browser. Here we have 2 things to look at: memory usage and blocking I/O. Each of these threads uses memory. Many threads use a lot of memory. Thousands of users would cause thousands of threads to use a lot of memory&hellip;you see where this is going&hellip;you will run out of memory soon and your page or service will not respond anymore. Blocking I/O is the cause for that problem: each one of these threads does things like DB access which takes some time to finish. This is normal because the DB tables might be huge and queries might take long to find the result you are looking for. Now the script on your web server would usually execute a DB query, <strong>then wait until it gets a result</strong> from the DB server and then continue. While the DB server fetches your data your whole script is blocked. It does not continue to run until the result has come back and it is using memory and other resources while waiting. If this happens <strong>several thousand times at once </strong>this blocks a lot of resources and your server goes into a memory dry spell. If it would be possible to get rid of all these threads and to put them all into a big pool this would solve some memory issues. If it on top of that would be possible to continue doing other tasks while waiting for DB queries this would surely help performance to increase &ndash; and that&rsquo;s what node.js does.</p>

<h3>Event Loop to the Rescue</h3>

<p> A node-based server will pool all incoming connections and the underlying node framework can do things like <strong>hanging these connections</strong> to a &ldquo;waiting&rdquo; state while allowing the server to continue working on creating the response. The <strong>event loop and the callback paradigm</strong> in node.js is used to execute a DB query, but not wait for a response blocking a lot of resources. Rather a callback is attached to the DB result and node.js goes on with other tasks (saving CPU cycles). For the browser on the other side this results simply in a &ldquo;waiting for response&rdquo; situation, same as for the threaded server. So, whenever the result from the DB comes back, node.js is executing whatever callback function was attached to the querying function and once the request is ready it will get the related connection from the pool, end its &ldquo;waiting&rdquo; state and return it to the browser. This is causing way less memory usage and allows for much faster response times. This is just a tiny bit of the whole story, so make sure you <a href="http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf">get into</a> this!</p>

<h3>But Why is this Important?</h3>

<p> Well, Ajax and Comet-driven web applications are generating heavy load on web servers, especially if you look at chat applications or multiplayer browser games where there are <strong>many concurrent connections</strong> and small response times are essential. Here lays the strength of node.js. In the past to me it felt like we had reached a time where the traditional way to implement our web servers would not fit to the demands that we had on the client-side during the last months. <a href="http://cometdaily.com/2007/12/11/the-future-of-comet-part-1-comet-today/">Comet and Ajax-Push is a big hack</a>, <a href="http://dev.w3.org/html5/websockets/">HTML5 Web Sockets</a> are knocking at our door and we want to do things like <a href="http://www.google.com/search?q=data+streaming+realtime+web">real time data streaming</a>. Node.js can fill this need. Sure, it takes some time of getting used to for developers that have been working with &ldquo;traditional&rdquo; Ajax paradigms for the past years. It also seems like we would walk into a time where regular websites and Ajax driven web applications would get their own servers. But it surely feels like we would finally have a toolkit which solves many of our newly developed needs and which brings the web as a whole a big step further. It might well be the best thing since sliced bread. On top of that it is now possible to write a simple web server and basically all the server side logic in JavaScript, which is great if you are working with JavaScript on the client side as well. To close this I can just encourage anybody working with Ajax or Comet or even just JavaScript in any way <a href="http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf">to look into node.js</a> &ndash; it helped me to understand web server issues in more detail and I will be working with this and see where it goes. As it seems some <a href="http://wiki.github.com/ry/node/">others are working with this already too</a> and even Simon Willison <a href="http://simonwillison.net/2009/Nov/23/node/">was excited</a> after Ryan Dahl gave a good introduction to node.js at <a href="http://jsconf.eu/2009/">last year&rsquo;s JSConf</a>:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Widgets: the ubiquitous mobile web]]></title>
    <link href="http://pavingways.github.io/mobile-widgets-the-ubiquitous-mobile-web_84.html"/>
    <updated>2007-05-06T16:33:39+02:00</updated>
    <id>http://pavingways.github.io/mobile-widgets-the-ubiquitous-mobile-web_84</id>
    <content type="html"><![CDATA[<p>
      <img src="http://www.pavingways.com/wp-content/uploads/nokia_widgets.JPG" alt="Nokia Mobile Widgets" title="Nokia Mobile Widgets" style="margin: 0pt 0pt 10px 10px; float: right" />On <a href="http://www.nokia.com/A4136001?newsid=1118790" title="Nokia Press Release about Mobile Widgets"><span>April 16, 2007</span> Nokia announced</a> their S60 platform would support widgets in subsequent releases. This means, using their WebKit based browser under the hood, newer phones (S60 3rd ed. with Feature Pack 2) will have support for those small applications, mostly serving not more than a single purpose (e.g. show the weather or an RSS feed) that are well known on the desktop since a couple of years now.
    </p>


<pre><code>&lt;p&gt;
  &lt;em&gt;In preparation to &lt;a href="http://2007.xtech.org/public/schedule/detail/150"&gt;my talk at this year's XTech conference&lt;/a&gt; I want to point out some important things related to this announcement. I think widgets on (mobile) devices are a major step in the right direction and I feel the mobile web can finally get the boost it so desperately was waiting for since a couple of years now. "The Ubiquitous Web" is this year's XTech topic - I feel the mobile web will become ubiquitous pretty soon...This article can be seen as a primer to my talk at XTech: &lt;a href="http://2007.xtech.org/public/schedule/detail/150"&gt;Ajax on mobile devices - making mobile web apps ubiquitous&lt;/a&gt;.&lt;/em&gt;&lt;em&gt; &lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;!--more--&gt;The Nokia announcement is nothing new, but still it is an important announcement, because it is yet another vendor of a phone browser to announce not only support for Ajax but also for widgets. In the case of Nokia it's even a phone and platform manufacturer.
&lt;/p&gt;

&lt;p&gt;
  &lt;img src="http://www.pavingways.com/wp-content/uploads/opera_platform_early_screen.thumbnail.jpg" alt="Opera Platform Early Screenshot" title="Opera Platform" style="margin: 0pt 0pt 10px 10px; float: right" /&gt;Other browser vendors have done this before. The first one to implement a working mobile widget engine was &lt;a href="http://www.opera.com/"&gt;Opera&lt;/a&gt; back in October 2004, it was called &lt;a href="http://www.opera.com/products/mobile/platform/"&gt;Opera Platform&lt;/a&gt;. While the Opera Platform was hard to install and more or less a proof-of-concept approach, Opera 9 for mobile, the browser that is soon to be released, also features widgets and comes pre-installed in many devices. New versions of the &lt;a href="http://www.access-company.com/products/netfrontmobile/browser/index.html"&gt;Netfront browser&lt;/a&gt; and the &lt;a href="http://www.openwave.com/us/products/handset_products/mobile_widgets/"&gt;OpenWave MIDAS project&lt;/a&gt; are announced to feature support not only for Ajax, but also for widgets. This shows that all major browser vendors in the mobile area have (finally) realized the importance of Ajax and widget support (hint: critical mass).
&lt;/p&gt;

&lt;p&gt;
  What about Apple's iPhone? Nobody has really seen it yet, but as it looks, it will not only feature Ajax powered widgets, but widgets will be the iPhone's main (only?) way to add applications to the device. The iPhone probably also can be seen as one of the driving forces behind the motivation in browser vendor's announcements and developments.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;What is the technical background?&lt;/strong&gt; Widgets are little applications typically created using existing web technologies, such as XHTML, CSS and JavaScript (yes, this means Ajax to a big extend). Nokia calls their widget environment "Web Run-Time" and, as already mentioned, this environment essentially means the already existing web browser on the device. However in contrast to the browser a widget is not loaded by typing in a URL into the browser, but it is a web application that is installed directly on the phone, so all the images, CSS files and JavaScript code is already on the phone and can therefore be much bigger than if it would have to be loaded through a 3G or GPRS network connection.
&lt;/p&gt;

&lt;p&gt;
  Another very important aspect of the Web Run-Time environment and basically any widget environment is that the run-time environment can do things a regular web browser was not able to do before: widgets can get access to the device API and consequently can interface to the phone hardware such as GPS or camera and other applications like the calendar or contact manager.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Why is this important?&lt;/strong&gt; XHTML/CSS/JavaScript and Ajax are well known standards and technologies amongst a large web developer community. Those technologies are powering the most successful applications and services on the web. For those services it was hard to implement mobile verisons of their services for mobile devices. The support for web-standards based widgets on mobile phones is a huge step forward to a world where every web developer can be able to create an application for a mobile phone and where those web applications that are successful on the desktop can also be successful on mobile devices.
&lt;/p&gt;

&lt;p&gt;
  Furthermore widgets can do more by accessing a device's hardware and applications and are therefore way more valuable to the user than a regular web application. Imagine a widget that can be used to make a picture and store it to your flickr account: it would start your camera, grab the picture you take, add location tags automatically (if your phone has GPS) and asynchronously upload the picture to flickr while you're already doing something else like reading the latest RSS feed in your news widget.
&lt;/p&gt;

&lt;p&gt;
  But maybe the most important aspect of this is that the underlying technologies - XHTML/CSS/JS/Ajax - are universally used across all those different widget engines and run-times. The develop-once-deploy-to-many vision appears again... Mobile widgets could emerge as a major player against Java ME applications in many areas. Still it has to be kept in mind that the same way as browser implementations of those technologies differ from one to the other it will be the same with widget engines. It cannot be expected that a widget, once created, will run in different widget engines without modifications or even complete rewriting. Most probably the widget engines will also employ different means to wrap the widget application in a deployable package, using ZIP containers will probably be only one of the methods.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;What role does Ajax play here?&lt;/strong&gt; Ajax will, as well as the other open standards-based technologies, play a major role in the widget creator's toolbox. While XHTML and CSS will handle structure and presentation, JavaScript will act as the business logic layer and Ajax will provide the means to communicate asynchronously with remote servers and web services of different kinds.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;How this makes the web ubiquitous?&lt;/strong&gt; A phone that comes pre-installed with your favorite web applications (read "widgets") needs very little data transmissions to get live data from the web (read "Ajax"). Therefore widgets, powered by Ajax will be able to provide phone users with useful applications, that can connect to web services and other applications on phones of other users. If developing widgets for mobile phones will be as easy as anticipated above, these widgets will be able to do what regular browsers on mobile devices have been trying to achieve in quite some years until now: make people actually use the mobile web! Since the Ajax requests can happen asynchronously and in the background the user of the application doesn't even need to know that the "web" is being accessed right now. The mobile web will become ubiquitous and invisible at the same time - ok, concededly this is a very philosophical view - but maybe not even too far away from the future reality.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Further Resources:&lt;/strong&gt; &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="http://www.nokia.com/A4136001?newsid=1118790" title="Nokia Press Release about Mobile Widgets"&gt;Nokia press release on Widgets support&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://www.s60.com/business/newsevents/audiocast"&gt;Audiocast following the Nokia Press release with Tero Ojanperä, CTO, Nokia&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://www.s60.com/business/productinfo/technologyupdate/?action=archiveNews&amp;yid=2007&amp;mid=4&amp;whatshot=1&amp;hotNewsId=346&amp;techup=1"&gt;S60.com press release / Technology Update on Nokia Widgets&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://www.allaboutsymbian.com/news/item/5152_S60_Widgets_and_Web_Run-Time.php"&gt;S60 Widgets and Web Run-Time announcement on allaboutsymbian.com&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class="topic"&gt;&lt;/span&gt;&lt;a href="http://blogs.s60.com/voiceofs60/2007/04/podcast_20_ganesh_sivaraman_s6.html"&gt;Voice of S60 - Podcast #20: Ganesh Sivaraman, S60 Widgets&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://www.gartner.com/DisplayDocument?id=503994"&gt;Gartner Group's view on S60 widgets&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://opengardensblog.futuretext.com/archives/2007/04/nokia_s60_widge.html"&gt;Ajit's post on the Nokia announcement&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://en.wikipedia.org/wiki/Widget_engine#Mobile_widgets"&gt;Mobile Widgets Definition on Wikipedia&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
